# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import sys
import os
sys.path.insert(0, os.path.abspath('..'))

# -- Project information -----------------------------------------------------

project = 'Mochi'
copyright = '2019, Argonne National Laboratory'
author = 'Argonne National Laboratory'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = ''


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'breathe',
    'recommonmark',
    'sphinx.ext.todo',
    'sphinx_copybutton',
    'sphinx.ext.autosectionlabel',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    'logo_only': True
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

html_logo = '_static/mochi-logo.png'

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'Mochidoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'Mochi.tex', 'Mochi Documentation',
     'Argonne National Laboratory', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'mochi', 'Mochi Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Mochi', 'Mochi Documentation',
     author, 'Mochi', 'One line description of project.',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------

here = os.path.dirname(os.path.realpath(__file__))

def generate_thallium_api():
    # Download thallium as an archive
    import urllib.request
    urllib.request.urlretrieve(
        'https://github.com/mochi-hpc/mochi-thallium/archive/refs/heads/main.zip',
        'mochi-thallium.zip')
    # Unzip the file
    import zipfile
    with zipfile.ZipFile('mochi-thallium.zip', 'r') as zip_ref:
        zip_ref.extractall('.')
    # All doxygen
    import subprocess
    subprocess.call('cd mochi-thallium-main && doxygen', shell=True)
    # Move xml folder
    import shutil
    shutil.move('mochi-thallium-main/doc/xml',
                'thallium/doxygen')
    # Remove mochi-thallium.zip and mochi-thallium-main
    os.remove('mochi-thallium.zip')
    shutil.rmtree('mochi-thallium-main')
    # TODO: get the class names from the XML files themselves
    classes = [
            'thallium::abt',
            'thallium::abt_exception',
            'thallium::anonymous',
            'thallium::async_response',
            'thallium::barrier',
            'thallium::barrier_exception',
            'thallium::bulk',
            'thallium::bulk_segment',
            'thallium::callable_remote_procedure_with_context',
            'thallium::condition_variable',
            'thallium::condition_variable_exception',
            'thallium::endpoint',
            'thallium::engine',
            'thallium::eventual',
            'thallium::eventual<void>',
            'thallium::eventual_exception',
            'thallium::exception',
            'thallium::future',
            'thallium::future_exception',
            'thallium::logger',
            'thallium::managed',
            'thallium::margo_exception',
            'thallium::mutex',
            'thallium::mutex_exception',
            'thallium::output_archive',
            'thallium::packed_data',
            'thallium::pool',
            'thallium::pool_exception',
            'thallium::proc_input_archive',
            'thallium::proc_output_archive',
            'thallium::provider',
            'thallium::provider_handle',
            'thallium::recursive_mutex',
            'thallium::remote_bulk',
            'thallium::remote_procedure',
            'thallium::request_with_context',
            'thallium::rwlock',
            'thallium::rwlock_exception',
            'thallium::scheduler',
            'thallium::scheduler_exception',
            'thallium::self',
            'thallium::self_exception',
            'thallium::task',
            'thallium::task_exception',
            'thallium::thread',
            'thallium::thread_exception',
            'thallium::timed_callback',
            'thallium::timeout',
            'thallium::timer',
            'thallium::timer_exception',
            'thallium::xstream',
            'thallium::xstream_barrier',
            'thallium::xstream_barrier_exception',
            'thallium::xstream_exception'
    ]
    # Generate API from template
    import jinja2
    environment = jinja2.Environment(loader=jinja2.FileSystemLoader('.'))
    template = environment.get_template('thallium/api.rst.in')
    with open('thallium/api.rst', 'w+') as f:
        f.write(template.render(classes=classes))

generate_thallium_api()

breathe_default_project = 'thallium'
breathe_projects = {
    'thallium': os.path.join(here, 'thallium', 'doxygen')
}

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

def setup(app):
    app.add_css_file('custom.css')
