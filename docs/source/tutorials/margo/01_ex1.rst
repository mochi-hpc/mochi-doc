.. |cbox| raw:: html

    <input type="checkbox">

Exercise 1: simple RPC and RDMA using Margo
===========================================

.. note::

   The instructions in these exercises have a checkbox |cbox| that
   you can click on to help you keep track of your progress. These
   checkboxes are not connected to any action, they are just there for
   you to mark your progress.

The code for this exercise has been cloned in :code:`margo-tutorial-exercises`
in your development environment.
In a terminal connected to your docker container, make sure you are in the
appropriate directory.

.. code-block:: console
   cd margo-tutorial/margo-tutorial-exercises

The :code:`src` directory provides a :code:`client.c` client code,
a :code:`server.c` server code, a :code:`types.h` header defining RPC
types, and a :code:`phonebook.h` file containing a (very naive)
implementation of a phonebook.

In this exercise we will make the server manage a phonebook and service
two kinds of RPCs: adding a new entry, and looking up a phone number associated with a name.

|cbox| Let's start by setting up the spack environment and building the existing code:

.. code-block:: console

   spack env create margo-tuto-env spack.yaml
   spack env activate margo-tuto-env
   spack install
   mkdir build
   cd build
   cmake ..
   make

This will create the client and server programs.

|cbox| You can test your client and server programs by opening two terminals
(make sure you have run :code:`spack env activate margo-tuto-env` in them
to activate your spack environment) and running the following from the build directory.

For the server:

.. code-block:: console

   src/server na+sm

This will start the server and print its address. :code:`na+sm`
(the shared memory transport) may be changed to :code:`tcp` if you run this code
on multiple machines connected via an Ethernet network.

For the client:

.. code-block:: console

   src/client <server-address>

Copy :code:`<server-address>` from the standard output of the server command.
The server is setup to run indefinitely. You may kill it with Ctrl-C.

.. important::

   The server address will change whenever you restart it.

.. note::

   If you used tcp as protocol, the server might print an address containing
   a semicolumn. If this is the case, place the address in quotes when passing
   it to the client, other your shell will interpret the semicolumn as the
   end of your command.

Now inspect the server.c file.  One important data structure to take note of
is the :code:`server_data` struct.  It contains the state of the example service.
Anything added to this structure will be maintained across the lifetime of
the service and can (optionally) be manipulated by via RPCs.  This is where
we will maintain the phonebook data structure for this hands-on exercise.

You an also see that individual RPCs are registered using the
:code:`MARGO_REGISTER()` macro, as in the "sum" example.  Note that this example
also calls the :code:`margo_register_data()` function immediately after the RPC is
registered.  The purpose of :code:`margo_register_data()` is to associate state
(in this case the :code:`server_data` struct instance) with RPCs so that RPC
handlers can retrieve that pointer later without relying on a global
variable.  This convention makes it safe for a server daemon to run multiple
copies of the same provider without interfering with each other.  Any new
RPCs we add that manipulate the phonebook state will similarly need to
register that data pointer.

|cbox| Look at the API in :code:`phonebook.h`.  This is a local API for
manipulating a phonebook data structure.  Your task now is to add new RPCs
to the server that will allow
remote clients to manipulate a phonebook as well.  You will need to include
:code:`phonebook.h` in server.c so that the service has access to the phonebook API.   Next you must initiate a single phonebook instance for the service to maintain.  Edit :code:`server.c` to add the creation of a phonebook
object (i.e., a call to :code:`phonebook_new()`) and its destruction (i.e., a call
to :code:`phonebook_delete()`) when the server terminates.  This phonebook should
be added as a field to the :code:`server_data` structure and to the
:code:`svr_data` instance (see comments **(1)** to **(3)** in
:code:`server.c`).

|cbox| Your next task is to add two new RPCs, which we will call "insert" and "lookup".  Begin by defining their input and output argument types.  This is done using `MERCURY_GEN_PROC()` macros of the following form:

.. code-block:: c

   MERCURY_GEN_PROC(rpc_name,
      ((type)(arg1))\
      ((type)(arg2))\
      ...
      ((type)(argN)))

Edit the :code:`types.h` file to add the necessary type definitions
for these RPCs (:code:`insert_in_t`, :code:`insert_out_t`, :code:`lookup_in_t`
and :code:`lookup_out_t`, see comment **(4)**). Do so using the Mercury macros,
following the model of the :code:`sum_in_t` and :code:`sum_out_t` types.
Recall that we will use a uint64_t type to represent phone numbers.

*Hint: Mercury represents null-terminated strings with the type :code:`hg_string_t`,
whose serialization routines are defined in the :code:`mercury_proc_string.h` header.  You must include this header in types.h to gain access to this type definition.*

.. note::

   While the insertion operation does not technically return anything, it is still
   advised to make all RPCs return at least a :code:`uint32_t` error code to inform
   the sender of the success (or failure) of the operation.

.. note::

   If you only have half an hour to work on this problem, focus on the insert RPC
   and ignore the lookup RPC. You can circle back to these instructions for the
   latter if you have enough time.

|cbox| Edit :code:`server.c` to add the definitions and declarations of the handlers for
our two RPCs (see comment **(5)** and **(6)**). Feel free to copy/paste and modify
the existing :code:`sum` RPC. Don't forget to register your RPCs with the margo
instance in main (comment **(7)**), and don't forget to call :code:`margo_register_data`
to associate the server data with the RPC.

|cbox| Edit :code:`client.c` and use the existing code as an example to (1) register the
two RPCs here as well (comment **(8)**), and (2) define two insert and lookup
functions that will take a :code:`margo_instance_id` alongside the necessary
arguments to create an :code:`hg_handle_t`, forward it to the server with
the proper arguments, and receive the response (comment **(9)**).
These functions will need to call :code:`margo_create` to create the :code:`hg_handle_t`
handle for the RPC, :code:`margo_forward` to forward it to the server,
:code:`margo_get_output` to retrieve the response from the server,
:code:`margo_free_output` to free this response, and :code:`margo_destroy`
to destroy the :code:`hg_handle_t` handle.

|cbox| Try out your code by calling insert and lookup a few times in main (comment (10)).

Bonus: using RDMA to transfer larger amounts of data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Do this bonus part only if you have time, or as an exercise after the tutorial.
This part is less guided. You should now know how to add new RPCs to your code.

In this part, we will add a :code:`lookup_multi` RPC that uses RDMA to send
multiple names at once and return the array of associated phone numbers
(in practice this would be too little data to call for the use of RDMA,
but we will just pretend). For this, you may use the example
on :ref:`MargoBulk`.

Here are some tips for this part:

|cbox| On the client side, your :code:`lookup_multi` function could take
the number of names as a :code:`uint32_t` and the list of names
to look up as an array of null-terminated strings (:code:`const char* const*`),
as well as an output array of :code:`uint64_t`. See comment **(11)**
for a prototype.

|cbox| The important functions to work with RDMA are the following:
:code:`margo_bulk_create` (create an :code:`hg_bulk_t` to expose
a list of local memory segments for RDMA), :code:`margo_bulk_transfer`
(push/pull data to/from a local bulk handle, to/from a remote bulk handle),
and :code:`margo_bulk_free` (free a local :code:`hg_bulk_t` created by
:code:`margo_bulk_create`). Alongside the documentation on this website,
the `margo.h <https://github.com/mochi-hpc/mochi-margo/blob/main/include/margo.h>`_
header provides the necessary information to work with these function.

|cbox| You will need to create two bulk handles on the client and two on the server.
On the client, the first will expose the names as read-only (remember
that :code:`margo_bulk_create` can take a list of non-contiguous segments,
but you will need to use :code:`strlen(...)+1` as the size of each segment
to keep the null terminator of each name), and the second will expose
the output array as write only.

|cbox| You will need to transfer the two bulk handles in the RPC arguments,
and since names can have a varying size, you will have to also transfer
the total size of the bulk handle wrapping names, so that the server
knows how much memory to allocate for its local buffer. The :code:`hg_bulk_t`
type's serialization routines are defined in :code:`mercury_proc_bulk.h`.

|cbox| On the server side, you will need to allocate two buffers;
one to receive the names via a pull operation, the other to send
the phone numbers via a push.

|cbox| You will need to create two :code:`hg_bulk_t` to expose these buffers.

|cbox| After having transferred the names, they will be in the server's buffer,
which, contrary to the client's memory, is contiguous. You can rely on
the null-terminators to know where one name ends and the next starts.

